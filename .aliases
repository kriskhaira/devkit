# FOR ALL PLATFORMS
# After running, run this: source ~/.zshrc

# *** BASIC CONFIG STUFF RELATED TO THIS FOLDER ***
# ------------------------------------------------------------------------------------------------ #
CONFIGPATH='~/Dropbox/config'
alias e="subl $CONFIGPATH"

# BASIC OS STUFF
# ------------------------------------------------------------------------------------------------ #
alias 755folders="find . ./ -type d -exec chmod 755 {} \;"
alias 644files="find . ./ -type f -exec chmod 644 {} \;"
alias 777folders="find . ./ -type d -exec chmod 777 {} \;"
alias 777files="find . ./ -type f -exec chmod 777 {} \;"
alias dl='curl -C - -O'
alias p='pwd'
alias pwdcp='pwd | pbcopy' #copy the current path
alias ka9='sudo killall -9'
# help
alias '?'='alias | grep'
alias 'help'='?'

# Ember.js
# ------------------------------------------------------------------------------------------------ #
alias em="ember"
alias ems="ember serve"

# Grunt, JS, CSS, LESS, SASS, Compass, CoffeeScript
# ------------------------------------------------------------------------------------------------ #
alias cw='cake watch'
alias dlrattan='git clone git://github.com/kriskhaira/rattan.git'
alias gtwv='grunt watch --verbose'
alias remove@2x='for f in $(find ./ -name "*@2x*"); do mv "$f" "${f//@2x/}"; done'

# Drupal & Drush
# ------------------------------------------------------------------------------------------------ #

DMODULES=sites/all/modules
DDEFAULT=sites/default
DFILES=sites/default/files
alias drush='nocorrect drush' #for zsh
alias .sam='cd $DM'
alias dr='drush'
# caching stuff
alias drcc='drush cc' # clear cache
alias drnocsscache='drush vset preprocess_css 0'
alias drnojscache='drush vset preprocess_js 0'
alias drcacheoff='drush vset preprocess_css 0; drush vset preprocess_js 0; drush variable-set cache 0'
alias drcacheon='drush vset preprocess_css 1; drush vset preprocess_js 1; drush variable-set cache 1'
# misc
alias drfu='drush fu -y'
alias drfr='drush fr -y'
alias dri='drush pm-info'
# find, download and install modules
alias drfind='drush pml | ag'
alias drdl='drush dl -y'
alias dren='drush en -y'
# misc
alias dp_db="cat sites/default/settings.php | grep 'db_url ='" #this shows database settings
alias dpfiles='find `drush dd %files` -type d -exec chmod 777 {} \;'
alias dpsetupsettings='cp sites/default/default.settings.php sites/default/settings.php'
alias dpeditsettings='vi sites/default/settings.php'

# This is the Drupal upgrade script
# Use it like this ;
# dpupgrade downloadedpath/ destinationpath/
alias dpupgrade='echo "Press any key to CONFIRM. Press Ctrl+C to Cancel"; read; rsync -avH --exclude=_* --exclude=deploy --exclude=sites --exclude=.git* --delete'

# GIT
# ------------------------------------------------------------------------------------------------ #
# all these work with zsh's plugin
alias 'g?'='alias | grep "git"'
alias grmall='git status | grep deleted | awk '\''{print $3}'\'' | xargs git rm' #git rm all deleted files
alias gs='gst'
alias gi='vi .gitignore'
alias glup='git pull upstream $(current_branch)'
alias gt='git tag'
alias ggpusho='git push origin'

function gcof() {
  git checkout -b feature/$1
}

function grmb() {
  echo "Deleting branch $1 on both local and origin"
  git branch -D "$1"
  git push origin ":$1"
}

function grmf() {
  echo "Deleting feature/$1 on both local and origin"
  git branch -D "feature/$1"
  git push origin ":feature/$1"
}

# Fix typos
alias got='git'
alias gut='gut'
alias get='get'

# GIT FLOW
# ------------------------------------------------------------------------------------------------ #
function gitCurrentFeatureBranchName() {
  echo $(current_branch) | perl -pe "s|.*?/||"
}


# Get branch name in underscores
# Useful for Git-aware database.yml in Rails
function gbdb() {
  app_env=`brails r "print Rails.env"`
  feature_branch=`echo "$(current_branch)" | tr '-' '_' | tr '/' '_'`
  project_prefix="tly"

  echo "Project prefix has been set to \"tly\""
  echo "BRANCH NAME: ${project_prefix}_${app_env}_${feature_branch}"
}

alias gf='git flow'
alias gffs='git flow feature start'
alias gfff='git flow feature finish'
alias gfffthis='git flow feature finish `gitCurrentFeatureBranchName`'
alias gfinishandfuckfeature='gfffthis && gfuckfeature'
alias gfr='git flow release'
alias gmnoff='git merge --no-ff'

# Start and finish new release
function gfrsf() {
  echo "Starting and finishing new release"
  git flow release start $1
  git flow release finish $1
}


# NETWORKING
# ------------------------------------------------------------------------------------------------ #
alias pk='pagekite.py'

# REDIS
# ------------------------------------------------------------------------------------------------ #
alias redislog="tail -f log/redis.development.log"

# SEARCH & INDEXING
# ------------------------------------------------------------------------------------------------ #
alias search="ag"
alias ag='nocorrect ag'

# SSH
# ------------------------------------------------------------------------------------------------ #
alias sshshow='cat ~/.ssh/id_rsa.pub'
alias sshcopy='cat ~/.ssh/id_rsa.pub | pbcopy; echo "Copied SSH public key to clipboard."'
alias sshpaste='mkdir ~/.ssh; chmod 700 ~/.ssh; cd ~/.ssh; touch authorized_keys; chmod 600 authorized_keys; vi authorized_keys'
alias sshls='cd ~/.ssh/; ls -alF'


# MySQL
# ------------------------------------------------------------------------------------------------ #

function mysqlcopydb() {
  DBUSER=root
  DBPASSWORD=root
  DBSNAME=$1
  DBNAME=$2
  DBSERVER="127.0.0.1"

  fCreateTable=""
  fInsertData=""
  echo "Copying database ... (may take a while ...)"
  DBCONN="-h ${DBSERVER} -u ${DBUSER} --password=${DBPASSWORD}"
  echo "DROP DATABASE IF EXISTS ${DBNAME}" | mysql ${DBCONN}
  echo "CREATE DATABASE ${DBNAME}" | mysql ${DBCONN}
  for TABLE in `echo "SHOW TABLES" | mysql $DBCONN $DBSNAME | tail -n +2`; do
          createTable=`echo "SHOW CREATE TABLE ${TABLE}"|mysql -B -r $DBCONN $DBSNAME|tail -n +2|cut -f 2-`
          fCreateTable="${fCreateTable} ; ${createTable}"
          insertData="INSERT INTO ${DBNAME}.${TABLE} SELECT * FROM ${DBSNAME}.${TABLE}"
          fInsertData="${fInsertData} ; ${insertData}"
  done;
  echo "$fCreateTable ; $fInsertData" | mysql $DBCONN $DBNAME
}


# ZSH
# ------------------------------------------------------------------------------------------------ #

alias zr='source ~/.zshrc; exec $SHELL -l'



# ZSH AND RUBY ON RAILS
# ------------------------------------------------------------------------------------------------ #
alias brdbm="brake db:migrate"

function rt {
  if [ $# -le 1 ] ; then
    echo Running: ruby -Itest $1
    ruby -Itest $1
  else
    p2=$2
    param=$p2[0,5]
    if [ $param = 'test/' ] ; then # Assumes all test files are in test/**
      while [ "$1" != "" ]; do
        if [ ! $test_files ]; then
          test_files=$1
        else
          test_files="$test_files,$1"
        fi
        shift
      done
      echo "Running: rake TEST_FILES=$test_files" # Note this requires custom Rakefile http://stackoverflow.com/questions/6656935/how-to-run-multiple-rails-unit-tests-at-once
      rake TEST_FILES=$test_files
    else
      regex=/$argv[2,-1]/
      echo "Running: ruby -Itest $1 '$regex'"
      ruby -Itest $1 -n $regex
    fi
  fi
}


# FOREMAN
# ------------------------------------------------------------------------------

alias fs='foreman start'

# ZEUS
# ------------------------------------------------------------------------------

alias ze='zeus'
alias zest='zeus start'
# restart zeus
alias zer='rm .zeus.sock; zeus start'
alias zes='zeus s'
alias zec='zeus c'



# JSON
# ------------------------------------------------------------------------------

function showjson() {
  http $1
}

